   1 Funct Int fibonacci(Int n) Begin
              [0001, 0000] (0004,          PR_FUNCTION) {Funct}
              [0001, 0006] (0015,               PR_INT) {Int}
              [0001, 0011] (0001,                   ID) {fibonacci}
              [0001, 0012] (0048,               AB_PAR) {(}
              [0001, 0012] (0015,               PR_INT) {Int}
              [0001, 0025] (0001,                   ID) {n}
              [0001, 0026] (0049,              FEC_PAR) {)}
              [0001, 0027] (0002,             PR_BEGIN) {Begin}
   2         Int v1 = 0, v2 = 1, v3;
              [0002, 0008] (0015,               PR_INT) {Int}
              [0002, 0013] (0001,                   ID) {v1}
              [0002, 0016] (0030,               OP_ATR) {=}
              [0002, 0018] (0027,               CT_INT) {0}
              [0002, 0019] (0053,                  SEP) {,}
              [0002, 0021] (0001,                   ID) {v2}
              [0002, 0024] (0030,               OP_ATR) {=}
              [0002, 0026] (0027,               CT_INT) {1}
              [0002, 0027] (0053,                  SEP) {,}
              [0002, 0029] (0001,                   ID) {v3}
              [0002, 0030] (0052,             TERMINAL) {;}
   3
   4         If(n == 0) Begin
              [0004, 0008] (0011,                PR_IF) {If}
              [0004, 0009] (0048,               AB_PAR) {(}
              [0004, 0010] (0001,                   ID) {n}
              [0004, 0014] (0032,          OP_RELEQUAL) {==}
              [0004, 0017] (0027,               CT_INT) {0}
              [0004, 0018] (0049,              FEC_PAR) {)}
              [0004, 0019] (0002,             PR_BEGIN) {Begin}
   5             Output(n);
              [0005, 0012] (0021,            PR_OUTPUT) {Output}
              [0005, 0013] (0048,               AB_PAR) {(}
              [0005, 0014] (0001,                   ID) {n}
              [0005, 0015] (0049,              FEC_PAR) {)}
              [0005, 0016] (0052,             TERMINAL) {;}
   6         End
              [0006, 0008] (0003,               PR_END) {End}
   7         If(n == 1) Begin
              [0007, 0008] (0011,                PR_IF) {If}
              [0007, 0009] (0048,               AB_PAR) {(}
              [0007, 0010] (0001,                   ID) {n}
              [0007, 0014] (0032,          OP_RELEQUAL) {==}
              [0007, 0017] (0027,               CT_INT) {1}
              [0007, 0018] (0049,              FEC_PAR) {)}
              [0007, 0019] (0002,             PR_BEGIN) {Begin}
   8             Output('0, ', n);
              [0008, 0012] (0021,            PR_OUTPUT) {Output}
              [0008, 0013] (0048,               AB_PAR) {(}
              [0008, 0014] (0029,               CT_STR) {'0, '}
              [0008, 0015] (0053,                  SEP) {,}
              [0008, 0027] (0001,                   ID) {n}
              [0008, 0028] (0049,              FEC_PAR) {)}
              [0008, 0029] (0052,             TERMINAL) {;}
   9         End
              [0009, 0008] (0003,               PR_END) {End}
  10         Else Begin
              [0010, 0008] (0012,              PR_ELSE) {Else}
              [0010, 0013] (0002,             PR_BEGIN) {Begin}
  11             Output('0, 1, ');
              [0011, 0012] (0021,            PR_OUTPUT) {Output}
              [0011, 0013] (0048,               AB_PAR) {(}
              [0011, 0014] (0029,               CT_STR) {'0, 1, '}
              [0011, 0015] (0049,              FEC_PAR) {)}
              [0011, 0016] (0052,             TERMINAL) {;}
  12             While(True) Begin
              [0012, 0012] (0013,             PR_WHILE) {While}
              [0012, 0013] (0048,               AB_PAR) {(}
              [0012, 0013] (0023,              PR_TRUE) {True}
              [0012, 0014] (0049,              FEC_PAR) {)}
              [0012, 0024] (0002,             PR_BEGIN) {Begin}
  13                     v3 = v1 + v2;
              [0013, 0021] (0001,                   ID) {v3}
              [0013, 0024] (0030,               OP_ATR) {=}
              [0013, 0026] (0001,                   ID) {v1}
              [0013, 0029] (0034,                OP_AD) {+}
              [0013, 0031] (0001,                   ID) {v2}
              [0013, 0032] (0052,             TERMINAL) {;}
  14
  15                     if(n < v3) Begin
              [0015, 0021] (0001,                   ID) {if}
              [0015, 0022] (0048,               AB_PAR) {(}
              [0015, 0023] (0001,                   ID) {n}
              [0015, 0026] (0040,              OP_LESS) {<}
              [0015, 0028] (0001,                   ID) {v3}
              [0015, 0029] (0049,              FEC_PAR) {)}
              [0015, 0031] (0002,             PR_BEGIN) {Begin}
  16                             Return;
              [0016, 0028] (0008,            PR_RETURN) {Return}
              [0016, 0029] (0052,             TERMINAL) {;}
  17                     End
              [0017, 0020] (0003,               PR_END) {End}
  18
  19                     Output(', ', v3);
              [0019, 0020] (0021,            PR_OUTPUT) {Output}
              [0019, 0021] (0048,               AB_PAR) {(}
              [0019, 0022] (0029,               CT_STR) {', '}
              [0019, 0023] (0053,                  SEP) {,}
              [0019, 0034] (0001,                   ID) {v3}
              [0019, 0035] (0049,              FEC_PAR) {)}
              [0019, 0036] (0052,             TERMINAL) {;}
  20                     v1 = v2;
              [0020, 0021] (0001,                   ID) {v1}
              [0020, 0024] (0030,               OP_ATR) {=}
              [0020, 0026] (0001,                   ID) {v2}
              [0020, 0027] (0052,             TERMINAL) {;}
  21                     v2 = v3;
              [0021, 0021] (0001,                   ID) {v2}
              [0021, 0024] (0030,               OP_ATR) {=}
              [0021, 0026] (0001,                   ID) {v3}
              [0021, 0027] (0052,             TERMINAL) {;}
  22             End
              [0022, 0012] (0003,               PR_END) {End}
  23         End
              [0023, 0008] (0003,               PR_END) {End}
  24 End
              [0024, 0000] (0003,               PR_END) {End}
  25
  26 Funct Int Main() Begin
              [0026, 0000] (0004,          PR_FUNCTION) {Funct}
              [0026, 0006] (0015,               PR_INT) {Int}
              [0026, 0010] (0005,              PR_MAIN) {Main}
              [0026, 0011] (0048,               AB_PAR) {(}
              [0026, 0012] (0049,              FEC_PAR) {)}
              [0026, 0017] (0002,             PR_BEGIN) {Begin}
  27         Int n;
              [0027, 0008] (0015,               PR_INT) {Int}
              [0027, 0013] (0001,                   ID) {n}
              [0027, 0014] (0052,             TERMINAL) {;}
  28         Output('Digite o limite: ');
              [0028, 0008] (0021,            PR_OUTPUT) {Output}
              [0028, 0009] (0048,               AB_PAR) {(}
              [0028, 0010] (0029,               CT_STR) {'Digite o limite: '}
              [0028, 0011] (0049,              FEC_PAR) {)}
              [0028, 0012] (0052,             TERMINAL) {;}
  29         Input(n);
              [0029, 0008] (0020,             PR_INPUT) {Input}
              [0029, 0009] (0048,               AB_PAR) {(}
              [0029, 0010] (0001,                   ID) {n}
              [0029, 0011] (0049,              FEC_PAR) {)}
              [0029, 0012] (0052,             TERMINAL) {;}
  30         fibonacci(n);
              [0030, 0009] (0001,                   ID) {fibonacci}
              [0030, 0010] (0048,               AB_PAR) {(}
              [0030, 0011] (0001,                   ID) {n}
              [0030, 0012] (0049,              FEC_PAR) {)}
              [0030, 0013] (0052,             TERMINAL) {;}
  31         Return;
              [0031, 0008] (0008,            PR_RETURN) {Return}
              [0031, 0009] (0052,             TERMINAL) {;}
  32 End
              [0032, 0000] (0003,               PR_END) {End}
              [0032, 0004] (0000,                  EOF) {EOF}