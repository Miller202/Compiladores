   1 Funct Int fibonacci(Int n) Begin
              [0001, 0000] (0004,          PR_FUNCTION) {Funct}
              [0001, 0006] (0016,               PR_INT) {Int}
              [0001, 0010] (0001,                   ID) {fibonacci}
              [0001, 0019] (0045,               AB_PAR) {(}
              [0001, 0020] (0016,               PR_INT) {Int}
              [0001, 0024] (0001,                   ID) {n}
              [0001, 0025] (0046,              FEC_PAR) {)}
              [0001, 0027] (0002,             PR_BEGIN) {Begin}
   2     Int v1 = 0, v2 = 1, v3;
              [0002, 0004] (0016,               PR_INT) {Int}
              [0002, 0008] (0001,                   ID) {v1}
              [0002, 0011] (0030,               OP_ATR) {=}
              [0002, 0013] (0027,               CT_INT) {0}
              [0002, 0014] (0050,                  SEP) {,}
              [0002, 0016] (0001,                   ID) {v2}
              [0002, 0019] (0030,               OP_ATR) {=}
              [0002, 0021] (0027,               CT_INT) {1}
              [0002, 0022] (0050,                  SEP) {,}
              [0002, 0024] (0001,                   ID) {v3}
              [0002, 0026] (0049,             TERMINAL) {;}
   3
   4     If(n == 0) Begin
              [0004, 0004] (0012,                PR_IF) {If}
              [0004, 0006] (0045,               AB_PAR) {(}
              [0004, 0007] (0001,                   ID) {n}
              [0004, 0009] (0031,          OP_RELEQUAL) {==}
              [0004, 0012] (0027,               CT_INT) {0}
              [0004, 0013] (0046,              FEC_PAR) {)}
              [0004, 0015] (0002,             PR_BEGIN) {Begin}
   5         Output(n);
              [0005, 0008] (0022,            PR_OUTPUT) {Output}
              [0005, 0014] (0045,               AB_PAR) {(}
              [0005, 0015] (0001,                   ID) {n}
              [0005, 0016] (0046,              FEC_PAR) {)}
              [0005, 0017] (0049,             TERMINAL) {;}
   6     End
              [0006, 0004] (0003,               PR_END) {End}
   7     If(n == 1) Begin
              [0007, 0004] (0012,                PR_IF) {If}
              [0007, 0006] (0045,               AB_PAR) {(}
              [0007, 0007] (0001,                   ID) {n}
              [0007, 0009] (0031,          OP_RELEQUAL) {==}
              [0007, 0012] (0027,               CT_INT) {1}
              [0007, 0013] (0046,              FEC_PAR) {)}
              [0007, 0015] (0002,             PR_BEGIN) {Begin}
   8         Output("0, ", n);
              [0008, 0008] (0022,            PR_OUTPUT) {Output}
              [0008, 0014] (0045,               AB_PAR) {(}
              [0008, 0015] (0029,               CT_STR) {"0, "}
              [0008, 0020] (0050,                  SEP) {,}
              [0008, 0022] (0001,                   ID) {n}
              [0008, 0023] (0046,              FEC_PAR) {)}
              [0008, 0024] (0049,             TERMINAL) {;}
   9     End
              [0009, 0004] (0003,               PR_END) {End}
  10     Else Begin
              [0010, 0004] (0013,              PR_ELSE) {Else}
              [0010, 0009] (0002,             PR_BEGIN) {Begin}
  11         Output("0, 1, ");
              [0011, 0008] (0022,            PR_OUTPUT) {Output}
              [0011, 0014] (0045,               AB_PAR) {(}
              [0011, 0015] (0029,               CT_STR) {"0, 1, "}
              [0011, 0023] (0046,              FEC_PAR) {)}
              [0011, 0024] (0049,             TERMINAL) {;}
  12         While(True) Begin
              [0012, 0008] (0014,             PR_WHILE) {While}
              [0012, 0013] (0045,               AB_PAR) {(}
              [0012, 0014] (0024,              PR_TRUE) {True}
              [0012, 0018] (0046,              FEC_PAR) {)}
              [0012, 0020] (0002,             PR_BEGIN) {Begin}
  13             v3 = v1 + v2;
              [0013, 0012] (0001,                   ID) {v3}
              [0013, 0015] (0030,               OP_ATR) {=}
              [0013, 0017] (0001,                   ID) {v1}
              [0013, 0020] (0033,                OP_AD) {+}
              [0013, 0022] (0001,                   ID) {v2}
              [0013, 0024] (0049,             TERMINAL) {;}
  14
  15             If(n < v3) Begin
              [0015, 0012] (0012,                PR_IF) {If}
              [0015, 0014] (0045,               AB_PAR) {(}
              [0015, 0015] (0001,                   ID) {n}
              [0015, 0017] (0039,              OP_LESS) {<}
              [0015, 0019] (0001,                   ID) {v3}
              [0015, 0021] (0046,              FEC_PAR) {)}
              [0015, 0023] (0002,             PR_BEGIN) {Begin}
  16                 Return;
              [0016, 0016] (0008,            PR_RETURN) {Return}
              [0016, 0022] (0049,             TERMINAL) {;}
  17             End
              [0017, 0012] (0003,               PR_END) {End}
  18
  19             Output(", ", v3);
              [0019, 0012] (0022,            PR_OUTPUT) {Output}
              [0019, 0018] (0045,               AB_PAR) {(}
              [0019, 0019] (0029,               CT_STR) {", "}
              [0019, 0023] (0050,                  SEP) {,}
              [0019, 0025] (0001,                   ID) {v3}
              [0019, 0027] (0046,              FEC_PAR) {)}
              [0019, 0028] (0049,             TERMINAL) {;}
  20             v1 = v2;
              [0020, 0012] (0001,                   ID) {v1}
              [0020, 0015] (0030,               OP_ATR) {=}
              [0020, 0017] (0001,                   ID) {v2}
              [0020, 0019] (0049,             TERMINAL) {;}
  21             v2 = v3;
              [0021, 0012] (0001,                   ID) {v2}
              [0021, 0015] (0030,               OP_ATR) {=}
              [0021, 0017] (0001,                   ID) {v3}
              [0021, 0019] (0049,             TERMINAL) {;}
  22         End
              [0022, 0008] (0003,               PR_END) {End}
  23     End
              [0023, 0004] (0003,               PR_END) {End}
  24 End
              [0024, 0000] (0003,               PR_END) {End}
  25
  26 Funct Int Main() Begin
              [0026, 0000] (0004,          PR_FUNCTION) {Funct}
              [0026, 0006] (0016,               PR_INT) {Int}
              [0026, 0010] (0005,              PR_MAIN) {Main}
              [0026, 0014] (0045,               AB_PAR) {(}
              [0026, 0015] (0046,              FEC_PAR) {)}
              [0026, 0017] (0002,             PR_BEGIN) {Begin}
  27     Int n;
              [0027, 0004] (0016,               PR_INT) {Int}
              [0027, 0008] (0001,                   ID) {n}
              [0027, 0009] (0049,             TERMINAL) {;}
  28     Output("Digite o limite: ");
              [0028, 0004] (0022,            PR_OUTPUT) {Output}
              [0028, 0010] (0045,               AB_PAR) {(}
              [0028, 0011] (0029,               CT_STR) {"Digite o limite: "}
              [0028, 0030] (0046,              FEC_PAR) {)}
              [0028, 0031] (0049,             TERMINAL) {;}
  29     Input(n);
              [0029, 0004] (0021,             PR_INPUT) {Input}
              [0029, 0009] (0045,               AB_PAR) {(}
              [0029, 0010] (0001,                   ID) {n}
              [0029, 0011] (0046,              FEC_PAR) {)}
              [0029, 0012] (0049,             TERMINAL) {;}
  30     fibonacci(n);
              [0030, 0004] (0001,                   ID) {fibonacci}
              [0030, 0013] (0045,               AB_PAR) {(}
              [0030, 0014] (0001,                   ID) {n}
              [0030, 0015] (0046,              FEC_PAR) {)}
              [0030, 0016] (0049,             TERMINAL) {;}
  31     Return;
              [0031, 0004] (0008,            PR_RETURN) {Return}
              [0031, 0010] (0049,             TERMINAL) {;}
  32 End
              [0032, 0000] (0003,               PR_END) {End}
              [0032, 0004] (0000,                  EOF) {EOF}