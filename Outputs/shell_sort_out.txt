   1 Funct Void shellsort(Int array[ ], Int n) Begin
              [0001, 0000] (0004,          PR_FUNCTION) {Funct}
              [0001, 0006] (0006,              PR_VOID) {Void}
              [0001, 0012] (0001,                   ID) {shellsort}
              [0001, 0013] (0048,               AB_PAR) {(}
              [0001, 0013] (0015,               PR_INT) {Int}
              [0001, 0026] (0001,                   ID) {array}
              [0001, 0027] (0050,               AB_COL) {[}
              [0001, 0033] (0051,              FEC_COL) {]}
              [0001, 0034] (0053,                  SEP) {,}
              [0001, 0035] (0015,               PR_INT) {Int}
              [0001, 0040] (0001,                   ID) {n}
              [0001, 0041] (0049,              FEC_PAR) {)}
              [0001, 0042] (0002,             PR_BEGIN) {Begin}
   2    Int h = 1, c, j;
              [0002, 0001] (0015,               PR_INT) {Int}
              [0002, 0006] (0001,                   ID) {h}
              [0002, 0008] (0030,               OP_ATR) {=}
              [0002, 0010] (0027,               CT_INT) {1}
              [0002, 0011] (0053,                  SEP) {,}
              [0002, 0013] (0001,                   ID) {c}
              [0002, 0014] (0053,                  SEP) {,}
              [0002, 0016] (0001,                   ID) {j}
              [0002, 0017] (0052,             TERMINAL) {;}
   3
   4         While (h < n) Begin
              [0004, 0008] (0013,             PR_WHILE) {While}
              [0004, 0015] (0048,               AB_PAR) {(}
              [0004, 0016] (0001,                   ID) {h}
              [0004, 0018] (0040,              OP_LESS) {<}
              [0004, 0020] (0001,                   ID) {n}
              [0004, 0021] (0049,              FEC_PAR) {)}
              [0004, 0022] (0002,             PR_BEGIN) {Begin}
   5            h = h * 3 + 1;
              [0005, 0003] (0001,                   ID) {h}
              [0005, 0005] (0030,               OP_ATR) {=}
              [0005, 0007] (0001,                   ID) {h}
              [0005, 0009] (0036,              OP_MULT) {*}
              [0005, 0011] (0027,               CT_INT) {3}
              [0005, 0013] (0034,                OP_AD) {+}
              [0005, 0015] (0027,               CT_INT) {1}
              [0005, 0016] (0052,             TERMINAL) {;}
   6    End
              [0006, 0001] (0003,               PR_END) {End}
   7
   8    h = h / 3;
              [0008, 0002] (0001,                   ID) {h}
              [0008, 0004] (0030,               OP_ATR) {=}
              [0008, 0006] (0001,                   ID) {h}
              [0008, 0008] (0037,               OP_DIV) {/}
              [0008, 0010] (0027,               CT_INT) {3}
              [0008, 0011] (0052,             TERMINAL) {;}
   9
  10    While(h > 0) Begin
              [0010, 0001] (0013,             PR_WHILE) {While}
              [0010, 0002] (0048,               AB_PAR) {(}
              [0010, 0003] (0001,                   ID) {h}
              [0010, 0010] (0039,           OP_GREATER) {>}
              [0010, 0012] (0027,               CT_INT) {0}
              [0010, 0013] (0049,              FEC_PAR) {)}
              [0010, 0014] (0002,             PR_BEGIN) {Begin}
  11            For (Int i = h, 1, n) Begin
              [0011, 0002] (0014,               PR_FOR) {For}
              [0011, 0007] (0048,               AB_PAR) {(}
              [0011, 0007] (0015,               PR_INT) {Int}
              [0011, 0012] (0001,                   ID) {i}
              [0011, 0014] (0030,               OP_ATR) {=}
              [0011, 0016] (0001,                   ID) {h}
              [0011, 0017] (0053,                  SEP) {,}
              [0011, 0019] (0027,               CT_INT) {1}
              [0011, 0020] (0053,                  SEP) {,}
              [0011, 0022] (0001,                   ID) {n}
              [0011, 0023] (0049,              FEC_PAR) {)}
              [0011, 0024] (0002,             PR_BEGIN) {Begin}
  12                     c = array[i];
              [0012, 0021] (0001,                   ID) {c}
              [0012, 0023] (0030,               OP_ATR) {=}
              [0012, 0025] (0001,                   ID) {array}
              [0012, 0026] (0050,               AB_COL) {[}
              [0012, 0027] (0001,                   ID) {i}
              [0012, 0028] (0051,              FEC_COL) {]}
              [0012, 0029] (0052,             TERMINAL) {;}
  13                     j = i;
              [0013, 0021] (0001,                   ID) {j}
              [0013, 0023] (0030,               OP_ATR) {=}
              [0013, 0025] (0001,                   ID) {i}
              [0013, 0026] (0052,             TERMINAL) {;}
  14                     While(j >= h And array[j - h] > c) Begin
              [0014, 0020] (0013,             PR_WHILE) {While}
              [0014, 0021] (0048,               AB_PAR) {(}
              [0014, 0022] (0001,                   ID) {j}
              [0014, 0029] (0041,          OP_GREATERT) {>=}
              [0014, 0032] (0001,                   ID) {h}
              [0014, 0033] (0009,               PR_AND) {And}
              [0014, 0038] (0001,                   ID) {array}
              [0014, 0039] (0050,               AB_COL) {[}
              [0014, 0040] (0001,                   ID) {j}
              [0014, 0046] (0035,               OP_SUB) {-}
              [0014, 0048] (0001,                   ID) {h}
              [0014, 0049] (0051,              FEC_COL) {]}
              [0014, 0051] (0039,           OP_GREATER) {>}
              [0014, 0053] (0001,                   ID) {c}
              [0014, 0054] (0049,              FEC_PAR) {)}
              [0014, 0055] (0002,             PR_BEGIN) {Begin}
  15                             array[j] = array[j - h];
              [0015, 0029] (0001,                   ID) {array}
              [0015, 0030] (0050,               AB_COL) {[}
              [0015, 0031] (0001,                   ID) {j}
              [0015, 0032] (0051,              FEC_COL) {]}
              [0015, 0038] (0030,               OP_ATR) {=}
              [0015, 0040] (0001,                   ID) {array}
              [0015, 0041] (0050,               AB_COL) {[}
              [0015, 0042] (0001,                   ID) {j}
              [0015, 0048] (0035,               OP_SUB) {-}
              [0015, 0050] (0001,                   ID) {h}
              [0015, 0051] (0051,              FEC_COL) {]}
              [0015, 0052] (0052,             TERMINAL) {;}
  16                             j = j - h;
              [0016, 0029] (0001,                   ID) {j}
              [0016, 0031] (0030,               OP_ATR) {=}
              [0016, 0033] (0001,                   ID) {j}
              [0016, 0035] (0035,               OP_SUB) {-}
              [0016, 0037] (0001,                   ID) {h}
              [0016, 0038] (0052,             TERMINAL) {;}
  17                     End
              [0017, 0020] (0003,               PR_END) {End}
  18                     array[j] = c;
              [0018, 0021] (0001,                   ID) {array}
              [0018, 0022] (0050,               AB_COL) {[}
              [0018, 0023] (0001,                   ID) {j}
              [0018, 0024] (0051,              FEC_COL) {]}
              [0018, 0030] (0030,               OP_ATR) {=}
              [0018, 0032] (0001,                   ID) {c}
              [0018, 0033] (0052,             TERMINAL) {;}
  19            End
              [0019, 0002] (0003,               PR_END) {End}
  20            h = h / 2;
              [0020, 0003] (0001,                   ID) {h}
              [0020, 0005] (0030,               OP_ATR) {=}
              [0020, 0007] (0001,                   ID) {h}
              [0020, 0009] (0037,               OP_DIV) {/}
              [0020, 0011] (0027,               CT_INT) {2}
              [0020, 0012] (0052,             TERMINAL) {;}
  21    End
              [0021, 0001] (0003,               PR_END) {End}
  22    Return;
              [0022, 0001] (0008,            PR_RETURN) {Return}
              [0022, 0002] (0052,             TERMINAL) {;}
  23 End
              [0023, 0000] (0003,               PR_END) {End}
  24
  25 Funct Int Main ( ) Begin
              [0025, 0000] (0004,          PR_FUNCTION) {Funct}
              [0025, 0006] (0015,               PR_INT) {Int}
              [0025, 0010] (0005,              PR_MAIN) {Main}
              [0025, 0016] (0048,               AB_PAR) {(}
              [0025, 0018] (0049,              FEC_PAR) {)}
              [0025, 0019] (0002,             PR_BEGIN) {Begin}
  26    Int n, v;
              [0026, 0001] (0015,               PR_INT) {Int}
              [0026, 0006] (0001,                   ID) {n}
              [0026, 0007] (0053,                  SEP) {,}
              [0026, 0009] (0001,                   ID) {v}
              [0026, 0010] (0052,             TERMINAL) {;}
  27    Output('Digite o tamanho do array: ');
              [0027, 0001] (0021,            PR_OUTPUT) {Output}
              [0027, 0002] (0048,               AB_PAR) {(}
              [0027, 0003] (0029,               CT_STR) {'Digite o tamanho do array: '}
              [0027, 0004] (0049,              FEC_PAR) {)}
              [0027, 0005] (0052,             TERMINAL) {;}
  28    Input(n);
              [0028, 0001] (0020,             PR_INPUT) {Input}
              [0028, 0002] (0048,               AB_PAR) {(}
              [0028, 0003] (0001,                   ID) {n}
              [0028, 0004] (0049,              FEC_PAR) {)}
              [0028, 0005] (0052,             TERMINAL) {;}
  29    Int array[n];
              [0029, 0001] (0015,               PR_INT) {Int}
              [0029, 0006] (0001,                   ID) {array}
              [0029, 0007] (0050,               AB_COL) {[}
              [0029, 0008] (0001,                   ID) {n}
              [0029, 0009] (0051,              FEC_COL) {]}
              [0029, 0010] (0052,             TERMINAL) {;}
  30
  31    Output('Digite os valores para serem ordenados: ');
              [0031, 0001] (0021,            PR_OUTPUT) {Output}
              [0031, 0002] (0048,               AB_PAR) {(}
              [0031, 0003] (0029,               CT_STR) {'Digite os valores para serem ordenados: '}
              [0031, 0004] (0049,              FEC_PAR) {)}
              [0031, 0005] (0052,             TERMINAL) {;}
  32         For (Int i = 0, 1, n) Begin
              [0032, 0008] (0014,               PR_FOR) {For}
              [0032, 0013] (0048,               AB_PAR) {(}
              [0032, 0013] (0015,               PR_INT) {Int}
              [0032, 0018] (0001,                   ID) {i}
              [0032, 0020] (0030,               OP_ATR) {=}
              [0032, 0022] (0027,               CT_INT) {0}
              [0032, 0023] (0053,                  SEP) {,}
              [0032, 0025] (0027,               CT_INT) {1}
              [0032, 0026] (0053,                  SEP) {,}
              [0032, 0028] (0001,                   ID) {n}
              [0032, 0029] (0049,              FEC_PAR) {)}
              [0032, 0030] (0002,             PR_BEGIN) {Begin}
  33            Input(array[i]);
              [0033, 0009] (0020,             PR_INPUT) {Input}
              [0033, 0010] (0048,               AB_PAR) {(}
              [0033, 0011] (0001,                   ID) {array}
              [0033, 0012] (0050,               AB_COL) {[}
              [0033, 0013] (0001,                   ID) {i}
              [0033, 0014] (0051,              FEC_COL) {]}
              [0033, 0015] (0049,              FEC_PAR) {)}
              [0033, 0016] (0052,             TERMINAL) {;}
  34         End
              [0034, 0008] (0003,               PR_END) {End}
  35         Output('Valores adicionados: ');
              [0035, 0008] (0021,            PR_OUTPUT) {Output}
              [0035, 0009] (0048,               AB_PAR) {(}
              [0035, 0010] (0029,               CT_STR) {'Valores adicionados: '}
              [0035, 0011] (0049,              FEC_PAR) {)}
              [0035, 0012] (0052,             TERMINAL) {;}
  36         For (Int i = 0, 1, n) Begin
              [0036, 0008] (0014,               PR_FOR) {For}
              [0036, 0013] (0048,               AB_PAR) {(}
              [0036, 0013] (0015,               PR_INT) {Int}
              [0036, 0018] (0001,                   ID) {i}
              [0036, 0020] (0030,               OP_ATR) {=}
              [0036, 0022] (0027,               CT_INT) {0}
              [0036, 0023] (0053,                  SEP) {,}
              [0036, 0025] (0027,               CT_INT) {1}
              [0036, 0026] (0053,                  SEP) {,}
              [0036, 0028] (0001,                   ID) {n}
              [0036, 0029] (0049,              FEC_PAR) {)}
              [0036, 0030] (0002,             PR_BEGIN) {Begin}
  37             v = array[i];
              [0037, 0013] (0001,                   ID) {v}
              [0037, 0015] (0030,               OP_ATR) {=}
              [0037, 0017] (0001,                   ID) {array}
              [0037, 0018] (0050,               AB_COL) {[}
              [0037, 0019] (0001,                   ID) {i}
              [0037, 0020] (0051,              FEC_COL) {]}
              [0037, 0021] (0052,             TERMINAL) {;}
  38        Outputln(v);
              [0038, 0005] (0022,          PR_OUTPUTLN) {Outputln}
              [0038, 0006] (0048,               AB_PAR) {(}
              [0038, 0007] (0001,                   ID) {v}
              [0038, 0008] (0049,              FEC_PAR) {)}
              [0038, 0009] (0052,             TERMINAL) {;}
  39         End
              [0039, 0008] (0003,               PR_END) {End}
  40
  41    shellsort(array, n);
              [0041, 0002] (0001,                   ID) {shellsort}
              [0041, 0003] (0048,               AB_PAR) {(}
              [0041, 0004] (0001,                   ID) {array}
              [0041, 0005] (0053,                  SEP) {,}
              [0041, 0019] (0001,                   ID) {n}
              [0041, 0020] (0049,              FEC_PAR) {)}
              [0041, 0021] (0052,             TERMINAL) {;}
  42
  43    Output('Valores ordenados: ');
              [0043, 0001] (0021,            PR_OUTPUT) {Output}
              [0043, 0002] (0048,               AB_PAR) {(}
              [0043, 0003] (0029,               CT_STR) {'Valores ordenados: '}
              [0043, 0004] (0049,              FEC_PAR) {)}
              [0043, 0005] (0052,             TERMINAL) {;}
  44         For (Int i = 0, 1, n) Begin
              [0044, 0008] (0014,               PR_FOR) {For}
              [0044, 0013] (0048,               AB_PAR) {(}
              [0044, 0013] (0015,               PR_INT) {Int}
              [0044, 0018] (0001,                   ID) {i}
              [0044, 0020] (0030,               OP_ATR) {=}
              [0044, 0022] (0027,               CT_INT) {0}
              [0044, 0023] (0053,                  SEP) {,}
              [0044, 0025] (0027,               CT_INT) {1}
              [0044, 0026] (0053,                  SEP) {,}
              [0044, 0028] (0001,                   ID) {n}
              [0044, 0029] (0049,              FEC_PAR) {)}
              [0044, 0030] (0002,             PR_BEGIN) {Begin}
  45             v = array[i];
              [0045, 0013] (0001,                   ID) {v}
              [0045, 0015] (0030,               OP_ATR) {=}
              [0045, 0017] (0001,                   ID) {array}
              [0045, 0018] (0050,               AB_COL) {[}
              [0045, 0019] (0001,                   ID) {i}
              [0045, 0020] (0051,              FEC_COL) {]}
              [0045, 0021] (0052,             TERMINAL) {;}
  46        Outputln(v);
              [0046, 0005] (0022,          PR_OUTPUTLN) {Outputln}
              [0046, 0006] (0048,               AB_PAR) {(}
              [0046, 0007] (0001,                   ID) {v}
              [0046, 0008] (0049,              FEC_PAR) {)}
              [0046, 0009] (0052,             TERMINAL) {;}
  47         End
              [0047, 0008] (0003,               PR_END) {End}
  48
  49    Return;
              [0049, 0001] (0008,            PR_RETURN) {Return}
              [0049, 0002] (0052,             TERMINAL) {;}
  50 End
              [0050, 0000] (0003,               PR_END) {End}
  51
              [0051, 0001] (0000,                  EOF) {EOF}