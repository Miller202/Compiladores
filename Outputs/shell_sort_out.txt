   1 Funct Void shellsort(Int array[ ], Int n) Begin
              [0001, 0000] (0004,          PR_FUNCTION) {Funct}
              [0001, 0006] (0006,              PR_VOID) {Void}
              [0001, 0011] (0001,                   ID) {shellsort}
              [0001, 0020] (0045,               AB_PAR) {(}
              [0001, 0021] (0016,               PR_INT) {Int}
              [0001, 0025] (0001,                   ID) {array}
              [0001, 0030] (0047,               AB_COL) {[}
              [0001, 0032] (0048,              FEC_COL) {]}
              [0001, 0033] (0050,                  SEP) {,}
              [0001, 0035] (0016,               PR_INT) {Int}
              [0001, 0039] (0001,                   ID) {n}
              [0001, 0040] (0046,              FEC_PAR) {)}
              [0001, 0042] (0002,             PR_BEGIN) {Begin}
   2    Int h = 1, c, j;
              [0002, 0001] (0016,               PR_INT) {Int}
              [0002, 0005] (0001,                   ID) {h}
              [0002, 0007] (0030,               OP_ATR) {=}
              [0002, 0009] (0027,               CT_INT) {1}
              [0002, 0010] (0050,                  SEP) {,}
              [0002, 0012] (0001,                   ID) {c}
              [0002, 0013] (0050,                  SEP) {,}
              [0002, 0015] (0001,                   ID) {j}
              [0002, 0016] (0049,             TERMINAL) {;}
   3
   4     While (h < n) Begin
              [0004, 0004] (0014,             PR_WHILE) {While}
              [0004, 0010] (0045,               AB_PAR) {(}
              [0004, 0011] (0001,                   ID) {h}
              [0004, 0013] (0039,              OP_LESS) {<}
              [0004, 0015] (0001,                   ID) {n}
              [0004, 0016] (0046,              FEC_PAR) {)}
              [0004, 0018] (0002,             PR_BEGIN) {Begin}
   5            h = h * 3 + 1;
              [0005, 0002] (0001,                   ID) {h}
              [0005, 0004] (0030,               OP_ATR) {=}
              [0005, 0006] (0001,                   ID) {h}
              [0005, 0008] (0035,              OP_MULT) {*}
              [0005, 0010] (0027,               CT_INT) {3}
              [0005, 0012] (0033,                OP_AD) {+}
              [0005, 0014] (0027,               CT_INT) {1}
              [0005, 0015] (0049,             TERMINAL) {;}
   6    End
              [0006, 0001] (0003,               PR_END) {End}
   7
   8    h = h / 3;
              [0008, 0001] (0001,                   ID) {h}
              [0008, 0003] (0030,               OP_ATR) {=}
              [0008, 0005] (0001,                   ID) {h}
              [0008, 0007] (0036,               OP_DIV) {/}
              [0008, 0009] (0027,               CT_INT) {3}
              [0008, 0010] (0049,             TERMINAL) {;}
   9
  10    While(h > 0) Begin
              [0010, 0001] (0014,             PR_WHILE) {While}
              [0010, 0006] (0045,               AB_PAR) {(}
              [0010, 0007] (0001,                   ID) {h}
              [0010, 0009] (0038,           OP_GREATER) {>}
              [0010, 0011] (0027,               CT_INT) {0}
              [0010, 0012] (0046,              FEC_PAR) {)}
              [0010, 0014] (0002,             PR_BEGIN) {Begin}
  11            For (Int i = h, n) Begin
              [0011, 0002] (0015,               PR_FOR) {For}
              [0011, 0006] (0045,               AB_PAR) {(}
              [0011, 0007] (0016,               PR_INT) {Int}
              [0011, 0011] (0001,                   ID) {i}
              [0011, 0013] (0030,               OP_ATR) {=}
              [0011, 0015] (0001,                   ID) {h}
              [0011, 0016] (0050,                  SEP) {,}
              [0011, 0018] (0001,                   ID) {n}
              [0011, 0019] (0046,              FEC_PAR) {)}
              [0011, 0021] (0002,             PR_BEGIN) {Begin}
  12             c = array[i];
              [0012, 0012] (0001,                   ID) {c}
              [0012, 0014] (0030,               OP_ATR) {=}
              [0012, 0016] (0001,                   ID) {array}
              [0012, 0021] (0047,               AB_COL) {[}
              [0012, 0022] (0001,                   ID) {i}
              [0012, 0023] (0048,              FEC_COL) {]}
              [0012, 0024] (0049,             TERMINAL) {;}
  13             j = i;
              [0013, 0012] (0001,                   ID) {j}
              [0013, 0014] (0030,               OP_ATR) {=}
              [0013, 0016] (0001,                   ID) {i}
              [0013, 0017] (0049,             TERMINAL) {;}
  14             While(j >= h And array[j - h] > c) Begin
              [0014, 0012] (0014,             PR_WHILE) {While}
              [0014, 0017] (0045,               AB_PAR) {(}
              [0014, 0018] (0001,                   ID) {j}
              [0014, 0020] (0040,          OP_GREATERT) {>=}
              [0014, 0023] (0001,                   ID) {h}
              [0014, 0025] (0009,               PR_AND) {And}
              [0014, 0029] (0001,                   ID) {array}
              [0014, 0034] (0047,               AB_COL) {[}
              [0014, 0035] (0001,                   ID) {j}
              [0014, 0037] (0034,               OP_SUB) {-}
              [0014, 0039] (0001,                   ID) {h}
              [0014, 0040] (0048,              FEC_COL) {]}
              [0014, 0042] (0038,           OP_GREATER) {>}
              [0014, 0044] (0001,                   ID) {c}
              [0014, 0045] (0046,              FEC_PAR) {)}
              [0014, 0047] (0002,             PR_BEGIN) {Begin}
  15                 array[j] = array[j - h];
              [0015, 0016] (0001,                   ID) {array}
              [0015, 0021] (0047,               AB_COL) {[}
              [0015, 0022] (0001,                   ID) {j}
              [0015, 0023] (0048,              FEC_COL) {]}
              [0015, 0025] (0030,               OP_ATR) {=}
              [0015, 0027] (0001,                   ID) {array}
              [0015, 0032] (0047,               AB_COL) {[}
              [0015, 0033] (0001,                   ID) {j}
              [0015, 0035] (0034,               OP_SUB) {-}
              [0015, 0037] (0001,                   ID) {h}
              [0015, 0038] (0048,              FEC_COL) {]}
              [0015, 0039] (0049,             TERMINAL) {;}
  16                 j = j - h;
              [0016, 0016] (0001,                   ID) {j}
              [0016, 0018] (0030,               OP_ATR) {=}
              [0016, 0020] (0001,                   ID) {j}
              [0016, 0022] (0034,               OP_SUB) {-}
              [0016, 0024] (0001,                   ID) {h}
              [0016, 0025] (0049,             TERMINAL) {;}
  17             End
              [0017, 0012] (0003,               PR_END) {End}
  18             array[j] = c;
              [0018, 0012] (0001,                   ID) {array}
              [0018, 0017] (0047,               AB_COL) {[}
              [0018, 0018] (0001,                   ID) {j}
              [0018, 0019] (0048,              FEC_COL) {]}
              [0018, 0021] (0030,               OP_ATR) {=}
              [0018, 0023] (0001,                   ID) {c}
              [0018, 0024] (0049,             TERMINAL) {;}
  19            End
              [0019, 0002] (0003,               PR_END) {End}
  20            h = h / 2;
              [0020, 0002] (0001,                   ID) {h}
              [0020, 0004] (0030,               OP_ATR) {=}
              [0020, 0006] (0001,                   ID) {h}
              [0020, 0008] (0036,               OP_DIV) {/}
              [0020, 0010] (0027,               CT_INT) {2}
              [0020, 0011] (0049,             TERMINAL) {;}
  21    End
              [0021, 0001] (0003,               PR_END) {End}
  22    Return;
              [0022, 0001] (0008,            PR_RETURN) {Return}
              [0022, 0007] (0049,             TERMINAL) {;}
  23 End
              [0023, 0000] (0003,               PR_END) {End}
  24
  25 Funct Int Main ( ) Begin
              [0025, 0000] (0004,          PR_FUNCTION) {Funct}
              [0025, 0006] (0016,               PR_INT) {Int}
              [0025, 0010] (0005,              PR_MAIN) {Main}
              [0025, 0015] (0045,               AB_PAR) {(}
              [0025, 0017] (0046,              FEC_PAR) {)}
              [0025, 0019] (0002,             PR_BEGIN) {Begin}
  26     Int n, v, i;
              [0026, 0004] (0016,               PR_INT) {Int}
              [0026, 0008] (0001,                   ID) {n}
              [0026, 0009] (0050,                  SEP) {,}
              [0026, 0011] (0001,                   ID) {v}
              [0026, 0012] (0050,                  SEP) {,}
              [0026, 0014] (0001,                   ID) {i}
              [0026, 0015] (0049,             TERMINAL) {;}
  27    Output("Digite o tamanho do array: ");
              [0027, 0001] (0022,            PR_OUTPUT) {Output}
              [0027, 0007] (0045,               AB_PAR) {(}
              [0027, 0008] (0029,               CT_STR) {"Digite o tamanho do array: "}
              [0027, 0037] (0046,              FEC_PAR) {)}
              [0027, 0038] (0049,             TERMINAL) {;}
  28    Input(n);
              [0028, 0001] (0021,             PR_INPUT) {Input}
              [0028, 0006] (0045,               AB_PAR) {(}
              [0028, 0007] (0001,                   ID) {n}
              [0028, 0008] (0046,              FEC_PAR) {)}
              [0028, 0009] (0049,             TERMINAL) {;}
  29    Int array[n];
              [0029, 0001] (0016,               PR_INT) {Int}
              [0029, 0005] (0001,                   ID) {array}
              [0029, 0010] (0047,               AB_COL) {[}
              [0029, 0011] (0001,                   ID) {n}
              [0029, 0012] (0048,              FEC_COL) {]}
              [0029, 0013] (0049,             TERMINAL) {;}
  30
  31    Output("Digite os valores para serem ordenados: ");
              [0031, 0001] (0022,            PR_OUTPUT) {Output}
              [0031, 0007] (0045,               AB_PAR) {(}
              [0031, 0008] (0029,               CT_STR) {"Digite os valores para serem ordenados: "}
              [0031, 0050] (0046,              FEC_PAR) {)}
              [0031, 0051] (0049,             TERMINAL) {;}
  32     For (i = 0, n) Begin
              [0032, 0004] (0015,               PR_FOR) {For}
              [0032, 0008] (0045,               AB_PAR) {(}
              [0032, 0009] (0001,                   ID) {i}
              [0032, 0011] (0030,               OP_ATR) {=}
              [0032, 0013] (0027,               CT_INT) {0}
              [0032, 0014] (0050,                  SEP) {,}
              [0032, 0016] (0001,                   ID) {n}
              [0032, 0017] (0046,              FEC_PAR) {)}
              [0032, 0019] (0002,             PR_BEGIN) {Begin}
  33         Input(array[i]);
              [0033, 0008] (0021,             PR_INPUT) {Input}
              [0033, 0013] (0045,               AB_PAR) {(}
              [0033, 0014] (0001,                   ID) {array}
              [0033, 0019] (0047,               AB_COL) {[}
              [0033, 0020] (0001,                   ID) {i}
              [0033, 0021] (0048,              FEC_COL) {]}
              [0033, 0022] (0046,              FEC_PAR) {)}
              [0033, 0023] (0049,             TERMINAL) {;}
  34     End
              [0034, 0004] (0003,               PR_END) {End}
  35
  36     Output("Valores adicionados: ");
              [0036, 0004] (0022,            PR_OUTPUT) {Output}
              [0036, 0010] (0045,               AB_PAR) {(}
              [0036, 0011] (0029,               CT_STR) {"Valores adicionados: "}
              [0036, 0034] (0046,              FEC_PAR) {)}
              [0036, 0035] (0049,             TERMINAL) {;}
  37     For (i = 0, n) Begin
              [0037, 0004] (0015,               PR_FOR) {For}
              [0037, 0008] (0045,               AB_PAR) {(}
              [0037, 0009] (0001,                   ID) {i}
              [0037, 0011] (0030,               OP_ATR) {=}
              [0037, 0013] (0027,               CT_INT) {0}
              [0037, 0014] (0050,                  SEP) {,}
              [0037, 0016] (0001,                   ID) {n}
              [0037, 0017] (0046,              FEC_PAR) {)}
              [0037, 0019] (0002,             PR_BEGIN) {Begin}
  38         v = array[i];
              [0038, 0008] (0001,                   ID) {v}
              [0038, 0010] (0030,               OP_ATR) {=}
              [0038, 0012] (0001,                   ID) {array}
              [0038, 0017] (0047,               AB_COL) {[}
              [0038, 0018] (0001,                   ID) {i}
              [0038, 0019] (0048,              FEC_COL) {]}
              [0038, 0020] (0049,             TERMINAL) {;}
  39            Output(v, " ");
              [0039, 0005] (0022,            PR_OUTPUT) {Output}
              [0039, 0011] (0045,               AB_PAR) {(}
              [0039, 0012] (0001,                   ID) {v}
              [0039, 0013] (0050,                  SEP) {,}
              [0039, 0015] (0029,               CT_STR) {" "}
              [0039, 0018] (0046,              FEC_PAR) {)}
              [0039, 0019] (0049,             TERMINAL) {;}
  40     End
              [0040, 0004] (0003,               PR_END) {End}
  41
  42    shellsort(array, n);
              [0042, 0001] (0001,                   ID) {shellsort}
              [0042, 0010] (0045,               AB_PAR) {(}
              [0042, 0011] (0001,                   ID) {array}
              [0042, 0016] (0050,                  SEP) {,}
              [0042, 0018] (0001,                   ID) {n}
              [0042, 0019] (0046,              FEC_PAR) {)}
              [0042, 0020] (0049,             TERMINAL) {;}
  43
  44    Output("Valores ordenados: ");
              [0044, 0001] (0022,            PR_OUTPUT) {Output}
              [0044, 0007] (0045,               AB_PAR) {(}
              [0044, 0008] (0029,               CT_STR) {"Valores ordenados: "}
              [0044, 0029] (0046,              FEC_PAR) {)}
              [0044, 0030] (0049,             TERMINAL) {;}
  45     For (i = 0, n) Begin
              [0045, 0004] (0015,               PR_FOR) {For}
              [0045, 0008] (0045,               AB_PAR) {(}
              [0045, 0009] (0001,                   ID) {i}
              [0045, 0011] (0030,               OP_ATR) {=}
              [0045, 0013] (0027,               CT_INT) {0}
              [0045, 0014] (0050,                  SEP) {,}
              [0045, 0016] (0001,                   ID) {n}
              [0045, 0017] (0046,              FEC_PAR) {)}
              [0045, 0019] (0002,             PR_BEGIN) {Begin}
  46         v = array[i];
              [0046, 0008] (0001,                   ID) {v}
              [0046, 0010] (0030,               OP_ATR) {=}
              [0046, 0012] (0001,                   ID) {array}
              [0046, 0017] (0047,               AB_COL) {[}
              [0046, 0018] (0001,                   ID) {i}
              [0046, 0019] (0048,              FEC_COL) {]}
              [0046, 0020] (0049,             TERMINAL) {;}
  47            Output(v, " ");
              [0047, 0005] (0022,            PR_OUTPUT) {Output}
              [0047, 0011] (0045,               AB_PAR) {(}
              [0047, 0012] (0001,                   ID) {v}
              [0047, 0013] (0050,                  SEP) {,}
              [0047, 0015] (0029,               CT_STR) {" "}
              [0047, 0018] (0046,              FEC_PAR) {)}
              [0047, 0019] (0049,             TERMINAL) {;}
  48     End
              [0048, 0004] (0003,               PR_END) {End}
  49
  50    Return;
              [0050, 0001] (0008,            PR_RETURN) {Return}
              [0050, 0007] (0049,             TERMINAL) {;}
  51 End
              [0051, 0000] (0003,               PR_END) {End}
  52
              [0052, 0001] (0000,                  EOF) {EOF}