   1  Funct Void fibonacci(Int n) Begin
              [0001, 0001] (0004,          PR_FUNCTION) {Funct}
              [0001, 0007] (0006,              PR_VOID) {Void}
              [0001, 0012] (0001,                   ID) {fibonacci}
              [0001, 0021] (0045,               AB_PAR) {(}
              [0001, 0022] (0016,               PR_INT) {Int}
              [0001, 0026] (0001,                   ID) {n}
              [0001, 0027] (0046,              FEC_PAR) {)}
              [0001, 0029] (0002,             PR_BEGIN) {Begin}
   2      Int v1 = 0, v2 = 1, v3;
              [0002, 0005] (0016,               PR_INT) {Int}
              [0002, 0009] (0001,                   ID) {v1}
              [0002, 0012] (0030,               OP_ATR) {=}
              [0002, 0014] (0027,               CT_INT) {0}
              [0002, 0015] (0050,                  SEP) {,}
              [0002, 0017] (0001,                   ID) {v2}
              [0002, 0020] (0030,               OP_ATR) {=}
              [0002, 0022] (0027,               CT_INT) {1}
              [0002, 0023] (0050,                  SEP) {,}
              [0002, 0025] (0001,                   ID) {v3}
              [0002, 0027] (0049,             TERMINAL) {;}
   3
   4      If(n == 0) Begin
              [0004, 0005] (0012,                PR_IF) {If}
              [0004, 0007] (0045,               AB_PAR) {(}
              [0004, 0008] (0001,                   ID) {n}
              [0004, 0010] (0031,          OP_RELEQUAL) {==}
              [0004, 0013] (0027,               CT_INT) {0}
              [0004, 0014] (0046,              FEC_PAR) {)}
              [0004, 0016] (0002,             PR_BEGIN) {Begin}
   5          Output(n);
              [0005, 0009] (0022,            PR_OUTPUT) {Output}
              [0005, 0015] (0045,               AB_PAR) {(}
              [0005, 0016] (0001,                   ID) {n}
              [0005, 0017] (0046,              FEC_PAR) {)}
              [0005, 0018] (0049,             TERMINAL) {;}
   6          Return;
              [0006, 0009] (0008,            PR_RETURN) {Return}
              [0006, 0015] (0049,             TERMINAL) {;}
   7      End
              [0007, 0005] (0003,               PR_END) {End}
   8      If(n == 1) Begin
              [0008, 0005] (0012,                PR_IF) {If}
              [0008, 0007] (0045,               AB_PAR) {(}
              [0008, 0008] (0001,                   ID) {n}
              [0008, 0010] (0031,          OP_RELEQUAL) {==}
              [0008, 0013] (0027,               CT_INT) {1}
              [0008, 0014] (0046,              FEC_PAR) {)}
              [0008, 0016] (0002,             PR_BEGIN) {Begin}
   9          Output("0, ", n);
              [0009, 0009] (0022,            PR_OUTPUT) {Output}
              [0009, 0015] (0045,               AB_PAR) {(}
              [0009, 0016] (0029,               CT_STR) {"0, "}
              [0009, 0021] (0050,                  SEP) {,}
              [0009, 0023] (0001,                   ID) {n}
              [0009, 0024] (0046,              FEC_PAR) {)}
              [0009, 0025] (0049,             TERMINAL) {;}
  10          Return;
              [0010, 0009] (0008,            PR_RETURN) {Return}
              [0010, 0015] (0049,             TERMINAL) {;}
  11
  12      End
              [0012, 0005] (0003,               PR_END) {End}
  13      Else Begin
              [0013, 0005] (0013,              PR_ELSE) {Else}
              [0013, 0010] (0002,             PR_BEGIN) {Begin}
  14          Output("0, 1, ");
              [0014, 0009] (0022,            PR_OUTPUT) {Output}
              [0014, 0015] (0045,               AB_PAR) {(}
              [0014, 0016] (0029,               CT_STR) {"0, 1, "}
              [0014, 0024] (0046,              FEC_PAR) {)}
              [0014, 0025] (0049,             TERMINAL) {;}
  15          While(True) Begin
              [0015, 0009] (0014,             PR_WHILE) {While}
              [0015, 0014] (0045,               AB_PAR) {(}
              [0015, 0015] (0024,              PR_TRUE) {True}
              [0015, 0019] (0046,              FEC_PAR) {)}
              [0015, 0021] (0002,             PR_BEGIN) {Begin}
  16              v3 = v1 + v2;
              [0016, 0013] (0001,                   ID) {v3}
              [0016, 0016] (0030,               OP_ATR) {=}
              [0016, 0018] (0001,                   ID) {v1}
              [0016, 0021] (0033,                OP_AD) {+}
              [0016, 0023] (0001,                   ID) {v2}
              [0016, 0025] (0049,             TERMINAL) {;}
  17
  18              If(n < v3) Begin
              [0018, 0013] (0012,                PR_IF) {If}
              [0018, 0015] (0045,               AB_PAR) {(}
              [0018, 0016] (0001,                   ID) {n}
              [0018, 0018] (0039,              OP_LESS) {<}
              [0018, 0020] (0001,                   ID) {v3}
              [0018, 0022] (0046,              FEC_PAR) {)}
              [0018, 0024] (0002,             PR_BEGIN) {Begin}
  19                  Return;
              [0019, 0017] (0008,            PR_RETURN) {Return}
              [0019, 0023] (0049,             TERMINAL) {;}
  20              End
              [0020, 0013] (0003,               PR_END) {End}
  21
  22              Output(", ", v3);
              [0022, 0013] (0022,            PR_OUTPUT) {Output}
              [0022, 0019] (0045,               AB_PAR) {(}
              [0022, 0020] (0029,               CT_STR) {", "}
              [0022, 0024] (0050,                  SEP) {,}
              [0022, 0026] (0001,                   ID) {v3}
              [0022, 0028] (0046,              FEC_PAR) {)}
              [0022, 0029] (0049,             TERMINAL) {;}
  23              v1 = v2;
              [0023, 0013] (0001,                   ID) {v1}
              [0023, 0016] (0030,               OP_ATR) {=}
              [0023, 0018] (0001,                   ID) {v2}
              [0023, 0020] (0049,             TERMINAL) {;}
  24              v2 = v3;
              [0024, 0013] (0001,                   ID) {v2}
              [0024, 0016] (0030,               OP_ATR) {=}
              [0024, 0018] (0001,                   ID) {v3}
              [0024, 0020] (0049,             TERMINAL) {;}
  25          End
              [0025, 0009] (0003,               PR_END) {End}
  26      End
              [0026, 0005] (0003,               PR_END) {End}
  27  End
              [0027, 0001] (0003,               PR_END) {End}
  28
  29  Funct Int Main() Begin
              [0029, 0001] (0004,          PR_FUNCTION) {Funct}
              [0029, 0007] (0016,               PR_INT) {Int}
              [0029, 0011] (0005,              PR_MAIN) {Main}
              [0029, 0015] (0045,               AB_PAR) {(}
              [0029, 0016] (0046,              FEC_PAR) {)}
              [0029, 0018] (0002,             PR_BEGIN) {Begin}
  30      Int n;
              [0030, 0005] (0016,               PR_INT) {Int}
              [0030, 0009] (0001,                   ID) {n}
              [0030, 0010] (0049,             TERMINAL) {;}
  31      Output("Digite o limite: ");
              [0031, 0005] (0022,            PR_OUTPUT) {Output}
              [0031, 0011] (0045,               AB_PAR) {(}
              [0031, 0012] (0029,               CT_STR) {"Digite o limite: "}
              [0031, 0031] (0046,              FEC_PAR) {)}
              [0031, 0032] (0049,             TERMINAL) {;}
  32      Input(n);
              [0032, 0005] (0021,             PR_INPUT) {Input}
              [0032, 0010] (0045,               AB_PAR) {(}
              [0032, 0011] (0001,                   ID) {n}
              [0032, 0012] (0046,              FEC_PAR) {)}
              [0032, 0013] (0049,             TERMINAL) {;}
  33      fibonacci(n);
              [0033, 0005] (0001,                   ID) {fibonacci}
              [0033, 0014] (0045,               AB_PAR) {(}
              [0033, 0015] (0001,                   ID) {n}
              [0033, 0016] (0046,              FEC_PAR) {)}
              [0033, 0017] (0049,             TERMINAL) {;}
  34      Return;
              [0034, 0005] (0008,            PR_RETURN) {Return}
              [0034, 0011] (0049,             TERMINAL) {;}
  35  End
              [0035, 0001] (0003,               PR_END) {End}
              [0035, 0004] (0000,                  EOF) {EOF}