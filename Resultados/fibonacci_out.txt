   1  Funct Void fibonacci(Int n) Begin
          S = 'Funct' DcFun S
              [0001, 0001] (0004,          PR_FUNCTION) {Funct}
          DcFun = FunTypeMinusInt 'id' '(' Param ')' BlockDc
          FunTypeMinusInt = 'Void'
              [0001, 0007] (0006,              PR_VOID) {Void}
              [0001, 0012] (0001,                   ID) {fibonacci}
              [0001, 0021] (0045,               AB_PAR) {(}
          Param = ParamDc
          ParamDc = VarType 'id' Vet ParamDcFat
          VarType = 'Int'
              [0001, 0022] (0016,               PR_INT) {Int}
              [0001, 0026] (0001,                   ID) {n}
          Vet = Epsilon
          ParamDcFat = Epsilon
              [0001, 0027] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0001, 0029] (0002,             PR_BEGIN) {Begin} 
   2      Int v1 = 0, v2 = 1, v3;
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0002, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0009] (0001,                   ID) {v1}
          Id = Epsilon
          Atr = '=' AtrFat
              [0002, 0012] (0030,               OP_ATR) {=}
          AtrFat = Ec
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0002, 0014] (0027,               CT_INT) {0}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0002, 0015] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0017] (0001,                   ID) {v2}
          Id = Epsilon
          Atr = '=' AtrFat
              [0002, 0020] (0030,               OP_ATR) {=}
          AtrFat = Ec
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0002, 0022] (0027,               CT_INT) {1}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0002, 0023] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0025] (0001,                   ID) {v3}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = Epsilon
              [0002, 0027] (0049,             TERMINAL) {;}
   3
   4      If(n == 0) Begin
          Instructions = Command Instructions
          Command = IfElse
          IfElse = 'If' '(' Eb ')' BlockDc IfElseFat
              [0004, 0005] (0012,                PR_IF) {If}
              [0004, 0007] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0004, 0008] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Rel Rb RaLL
          Rel = 'OP_RELEQUAL'
              [0004, 0010] (0031,          OP_RELEQUAL) {==}
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0004, 0013] (0027,               CT_INT) {0}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0004, 0014] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0004, 0016] (0002,             PR_BEGIN) {Begin}
   5          Output(n);
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0005, 0009] (0022,            PR_OUTPUT) {Output}
              [0005, 0015] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
              [0005, 0016] (0001,                   ID) {n}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0005, 0017] (0046,              FEC_PAR) {)}
              [0005, 0018] (0049,             TERMINAL) {;}
   6          Return;
          Instructions = Return Instructions
          Return = 'Return' Ec ';'
              [0006, 0009] (0008,            PR_RETURN) {Return}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0006, 0015] (0049,             TERMINAL) {;}
   7      End
              [0007, 0005] (0003,               PR_END) {End}
   8      If(n == 1) Begin
          IfElseFat = Epsilon
          Instructions = Command Instructions
          Command = IfElse
          IfElse = 'If' '(' Eb ')' BlockDc IfElseFat
              [0008, 0005] (0012,                PR_IF) {If}
              [0008, 0007] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0008, 0008] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Rel Rb RaLL
          Rel = 'OP_RELEQUAL'
              [0008, 0010] (0031,          OP_RELEQUAL) {==}
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0008, 0013] (0027,               CT_INT) {1}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0008, 0014] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0008, 0016] (0002,             PR_BEGIN) {Begin}
   9          Output("0, ", n);
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0009, 0009] (0022,            PR_OUTPUT) {Output}
              [0009, 0015] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
              [0009, 0016] (0029,               CT_STR) {"0, "}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = ',' OutputParam
              [0009, 0021] (0050,                  SEP) {,}
          OutputParam = Ec OutputParamFat
              [0009, 0023] (0001,                   ID) {n}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0009, 0024] (0046,              FEC_PAR) {)}
              [0009, 0025] (0049,             TERMINAL) {;}
  10          Return;
          Instructions = Return Instructions
          Return = 'Return' Ec ';'
              [0010, 0009] (0008,            PR_RETURN) {Return}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0010, 0015] (0049,             TERMINAL) {;}
  11
  12      End
              [0012, 0005] (0003,               PR_END) {End}
  13      Else Begin
          IfElseFat = 'Else' BlockDc
              [0013, 0005] (0013,              PR_ELSE) {Else}
          BlockDc = 'Begin' Instructions 'End'
              [0013, 0010] (0002,             PR_BEGIN) {Begin}
  14          Output("0, 1, ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0014, 0009] (0022,            PR_OUTPUT) {Output}
              [0014, 0015] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
              [0014, 0016] (0029,               CT_STR) {"0, 1, "}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0014, 0024] (0046,              FEC_PAR) {)}
              [0014, 0025] (0049,             TERMINAL) {;}
  15          While(True) Begin
          Instructions = Command Instructions
          Command = While
          While = 'While' '(' Eb ')' BlockDc
              [0015, 0009] (0014,             PR_WHILE) {While}
              [0015, 0014] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'PR_TRUE'
              [0015, 0015] (0024,              PR_TRUE) {True}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0015, 0019] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0015, 0021] (0002,             PR_BEGIN) {Begin}
  16              v3 = v1 + v2;
          Instructions = 'id' AtrDirFunCall Instructions
              [0016, 0013] (0001,                   ID) {v3}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0016, 0016] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0018] (0001,                   ID) {v1}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = 'OP_AD' Ta EaLL
              [0016, 0021] (0033,                OP_AD) {+}
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0023] (0001,                   ID) {v2}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0016, 0025] (0049,             TERMINAL) {;}
  17
  18              If(n < v3) Begin
          Instructions = Command Instructions
          Command = IfElse
          IfElse = 'If' '(' Eb ')' BlockDc IfElseFat
              [0018, 0013] (0012,                PR_IF) {If}
              [0018, 0015] (0045,               AB_PAR) {(} 
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0018, 0016] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Ops Ea RbLL
          Ops = 'OP_LESS'
              [0018, 0018] (0039,              OP_LESS) {<}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0018, 0020] (0001,                   ID) {v3} 
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0018, 0022] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0018, 0024] (0002,             PR_BEGIN) {Begin}
  19                  Return;
          Instructions = Return Instructions
          Return = 'Return' Ec ';'
              [0019, 0017] (0008,            PR_RETURN) {Return}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0019, 0023] (0049,             TERMINAL) {;}
  20              End
              [0020, 0013] (0003,               PR_END) {End}
  21
  22              Output(", ", v3);
          IfElseFat = Epsilon
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0022, 0013] (0022,            PR_OUTPUT) {Output}
              [0022, 0019] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
              [0022, 0020] (0029,               CT_STR) {", "}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = ',' OutputParam
              [0022, 0024] (0050,                  SEP) {,}
          OutputParam = Ec OutputParamFat
              [0022, 0026] (0001,                   ID) {v3}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0022, 0028] (0046,              FEC_PAR) {)}
              [0022, 0029] (0049,             TERMINAL) {;}
  23              v1 = v2;
          Instructions = 'id' AtrDirFunCall Instructions
              [0023, 0013] (0001,                   ID) {v1}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0023, 0016] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0023, 0018] (0001,                   ID) {v2}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0023, 0020] (0049,             TERMINAL) {;}
  24              v2 = v3;
          Instructions = 'id' AtrDirFunCall Instructions
              [0024, 0013] (0001,                   ID) {v2}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0024, 0016] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0024, 0018] (0001,                   ID) {v3}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0024, 0020] (0049,             TERMINAL) {;}
  25          End
          Instructions = Epsilon
              [0025, 0009] (0003,               PR_END) {End}
  26      End
          Instructions = Epsilon
              [0026, 0005] (0003,               PR_END) {End}
  27  End
          Instructions = Epsilon
              [0027, 0001] (0003,               PR_END) {End}
  28
  29  Funct Int Main() Begin
          S = 'Funct' DcFun S
              [0029, 0001] (0004,          PR_FUNCTION) {Funct}
          DcFun = 'Int' DcIntFunMain
              [0029, 0007] (0016,               PR_INT) {Int}
          DcIntFunMain = 'Main' '(' ')' BlockDc
              [0029, 0011] (0005,              PR_MAIN) {Main}
              [0029, 0015] (0045,               AB_PAR) {(}
              [0029, 0016] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0029, 0018] (0002,             PR_BEGIN) {Begin}
  30      Int n;
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0030, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0030, 0009] (0001,                   ID) {n}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = Epsilon
              [0030, 0010] (0049,             TERMINAL) {;}
  31      Output("Digite o limite: ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0031, 0005] (0022,            PR_OUTPUT) {Output}
              [0031, 0011] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
              [0031, 0012] (0029,               CT_STR) {"Digite o limite: "}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0031, 0031] (0046,              FEC_PAR) {)}
              [0031, 0032] (0049,             TERMINAL) {;}
  32      Input(n);
          Instructions = CommandIO Instructions
          CommandIO = Input
          Input = 'Input' '(' InputParam ')' ';'
              [0032, 0005] (0021,             PR_INPUT) {Input}
              [0032, 0010] (0045,               AB_PAR) {(}
          InputParam = 'id' Id InputParamFat
              [0032, 0011] (0001,                   ID) {n}
          Id = Epsilon
          InputParamFat = Epsilon
              [0032, 0012] (0046,              FEC_PAR) {)}
              [0032, 0013] (0049,             TERMINAL) {;}
  33      fibonacci(n);
          Instructions = 'id' AtrDirFunCall Instructions
              [0033, 0005] (0001,                   ID) {fibonacci} 
          AtrDirFunCall = FunCall
          FunCall = '(' ParamFun ')' ';'
              [0033, 0014] (0045,               AB_PAR) {(}
          ParamFun = Ec ParamFunLL
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0033, 0015] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          ParamFunLL = Epsilon
              [0033, 0016] (0046,              FEC_PAR) {)}
              [0033, 0017] (0049,             TERMINAL) {;}
  34      Return;
          Instructions = Return Instructions
          Return = 'Return' Ec ';'
              [0034, 0005] (0008,            PR_RETURN) {Return}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0034, 0011] (0049,             TERMINAL) {;}
  35  End
              [0035, 0001] (0003,               PR_END) {End}
          S = Epsilon
              [0035, 0004] (0000,                  EOF) {EOF}