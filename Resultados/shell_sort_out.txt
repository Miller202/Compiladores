   1  Funct Void shellsort(Int array[ ]) Begin
          S = 'Funct' DcFun S
              [0001, 0001] (0004,          PR_FUNCTION) {Funct}
          DcFun = FunTypeMinusInt 'id' '(' Param ')' BlockDc
          FunTypeMinusInt = 'Void'
              [0001, 0007] (0006,              PR_VOID) {Void}
              [0001, 0012] (0001,                   ID) {shellsort}
              [0001, 0021] (0045,               AB_PAR) {(}
          Param = ParamDc
          ParamDc = VarType 'id' Vet ParamDcFat
          VarType = 'Int'
              [0001, 0022] (0016,               PR_INT) {Int}
              [0001, 0026] (0001,                   ID) {array}
          Vet = '[' ']'
              [0001, 0031] (0047,               AB_COL) {[}
              [0001, 0033] (0048,              FEC_COL) {]}
          ParamDcFat = Epsilon
              [0001, 0034] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0001, 0036] (0002,             PR_BEGIN) {Begin}
   2      Int h = 1, c, j;
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0002, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0009] (0001,                   ID) {h}
          Id = Epsilon
          Atr = '=' AtrFat
              [0002, 0011] (0030,               OP_ATR) {=}
          AtrFat = Ec
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0002, 0013] (0027,               CT_INT) {1}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0002, 0014] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0016] (0001,                   ID) {c}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0002, 0017] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0002, 0019] (0001,                   ID) {j}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = Epsilon
              [0002, 0020] (0049,             TERMINAL) {;}
   3      Int n = @ array;
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0003, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0003, 0009] (0001,                   ID) {n}
          Id = Epsilon
          Atr = '=' AtrFat
              [0003, 0011] (0030,               OP_ATR) {=}
          AtrFat = Ec
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'OP_SIZE' 'id'
              [0003, 0013] (0044,              OP_SIZE) {@}
              [0003, 0015] (0001,                   ID) {array}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          DcIdAtrFat = Epsilon
              [0003, 0020] (0049,             TERMINAL) {;}
   4
   5      While (h < n) Begin
          Instructions = Command Instructions
          Command = While
          While = 'While' '(' Eb ')' BlockDc
              [0005, 0005] (0014,             PR_WHILE) {While}
              [0005, 0011] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0005, 0012] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Ops Ea RbLL
          Ops = 'OP_LESS'
              [0005, 0014] (0039,              OP_LESS) {<}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0005, 0016] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0005, 0017] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0005, 0019] (0002,             PR_BEGIN) {Begin}
   6          h = h * 3 + 1;
          Instructions = 'id' AtrDirFunCall Instructions
              [0006, 0009] (0001,                   ID) {h}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0006, 0011] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0006, 0013] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = 'OP_MULT' Fa TaLL
              [0006, 0015] (0035,              OP_MULT) {*}
          Fa = 'CT_INT'
              [0006, 0017] (0027,               CT_INT) {3}
          TaLL = Epsilon
          EaLL = 'OP_AD' Ta EaLL
              [0006, 0019] (0033,                OP_AD) {+}
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0006, 0021] (0027,               CT_INT) {1}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0006, 0022] (0049,             TERMINAL) {;}
   7      End
          Instructions = Epsilon
              [0007, 0005] (0003,               PR_END) {End}
   8
   9      h = h / 3;
          Instructions = 'id' AtrDirFunCall Instructions
              [0009, 0005] (0001,                   ID) {h}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0009, 0007] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0009, 0009] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = 'OP_DIV' Fa TaLL
              [0009, 0011] (0036,               OP_DIV) {/}
          Fa = 'CT_INT'
              [0009, 0013] (0027,               CT_INT) {3}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0009, 0014] (0049,             TERMINAL) {;}
  10
  11      While(h > 0) Begin
          Instructions = Command Instructions
          Command = While
          While = 'While' '(' Eb ')' BlockDc
              [0011, 0005] (0014,             PR_WHILE) {While}
              [0011, 0010] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0011, 0011] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Ops Ea RbLL
          Ops = 'OP_GREATER'
              [0011, 0013] (0038,           OP_GREATER) {>}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_INT'
              [0011, 0015] (0027,               CT_INT) {0}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0011, 0016] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0011, 0018] (0002,             PR_BEGIN) {Begin}
  12          For(Int i = h, n) Begin
          Instructions = Command Instructions
          Command = For
          For = 'For' '(' DcInt ',' IntValue ForFat
              [0012, 0009] (0015,               PR_FOR) {For}
              [0012, 0012] (0045,               AB_PAR) {(}
          DcInt = 'Int' 'id' '=' IntValue
              [0012, 0013] (0016,               PR_INT) {Int}
              [0012, 0017] (0001,                   ID) {i}
              [0012, 0019] (0030,               OP_ATR) {=}
          IntValue = 'id'
              [0012, 0021] (0001,                   ID) {h}
              [0012, 0022] (0050,                  SEP) {,}
          IntValue = 'id'
              [0012, 0024] (0001,                   ID) {n}
          ForFat = ')' BlockDc
              [0012, 0025] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0012, 0027] (0002,             PR_BEGIN) {Begin}
  13              c = array[i];
          Instructions = 'id' AtrDirFunCall Instructions
              [0013, 0013] (0001,                   ID) {c}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0013, 0015] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0013, 0017] (0001,                   ID) {array}
          IdFunCall = Id
          Id = '[' Ea ']'
              [0013, 0022] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0013, 0023] (0001,                   ID) {i}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0013, 0024] (0048,              FEC_COL) {]}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0013, 0025] (0049,             TERMINAL) {;}
  14              j = i;
          Instructions = 'id' AtrDirFunCall Instructions
              [0014, 0013] (0001,                   ID) {j}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0014, 0015] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0014, 0017] (0001,                   ID) {i}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0014, 0018] (0049,             TERMINAL) {;}
  15              While(j >= h And array[j - h] > c) Begin
          Instructions = Command Instructions
          Command = While
          While = 'While' '(' Eb ')' BlockDc
              [0015, 0013] (0014,             PR_WHILE) {While}
              [0015, 0018] (0045,               AB_PAR) {(}
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0019] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Ops Ea RbLL
          Ops = 'OP_GREATERT'
              [0015, 0021] (0040,          OP_GREATERT) {>=}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0024] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = 'OP_AND' Tb EbLL
              [0015, 0026] (0009,               PR_AND) {And}
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0030] (0001,                   ID) {array}
          IdFunCall = Id
          Id = '[' Ea ']'
              [0015, 0035] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0036] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = 'OP_SUB' Ta EaLL
              [0015, 0038] (0034,               OP_SUB) {-}
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0040] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0015, 0041] (0048,              FEC_COL) {]}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Ops Ea RbLL
          Ops = 'OP_GREATER'
              [0015, 0043] (0038,           OP_GREATER) {>}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0015, 0045] (0001,                   ID) {c}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
              [0015, 0046] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0015, 0048] (0002,             PR_BEGIN) {Begin}
  16                  array[j] = array[j - h];
          Instructions = 'id' AtrDirFunCall Instructions
              [0016, 0017] (0001,                   ID) {array}
          AtrDirFunCall = AtrDir
          AtrDir = '[' Ea ']' '=' Ec ';'
              [0016, 0022] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0023] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0016, 0024] (0048,              FEC_COL) {]}
              [0016, 0026] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0028] (0001,                   ID) {array}
          IdFunCall = Id
          Id = '[' Ea ']'
              [0016, 0033] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0034] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = 'OP_SUB' Ta EaLL
              [0016, 0036] (0034,               OP_SUB) {-}
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0016, 0038] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0016, 0039] (0048,              FEC_COL) {]}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0016, 0040] (0049,             TERMINAL) {;}
  17                  j = j - h;
          Instructions = 'id' AtrDirFunCall Instructions
              [0017, 0017] (0001,                   ID) {j}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0017, 0019] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0017, 0021] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = 'OP_SUB' Ta EaLL
              [0017, 0023] (0034,               OP_SUB) {-}
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0017, 0025] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0017, 0026] (0049,             TERMINAL) {;}
  18              End
          Instructions = Epsilon
              [0018, 0013] (0003,               PR_END) {End}
  19              array[j] = c;
          Instructions = 'id' AtrDirFunCall Instructions
              [0019, 0013] (0001,                   ID) {array}
          AtrDirFunCall = AtrDir
          AtrDir = '[' Ea ']' '=' Ec ';'
              [0019, 0018] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0019, 0019] (0001,                   ID) {j}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0019, 0020] (0048,              FEC_COL) {]}
              [0019, 0022] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0019, 0024] (0001,                   ID) {c}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0019, 0025] (0049,             TERMINAL) {;}
  20          End
          Instructions = Epsilon
              [0020, 0009] (0003,               PR_END) {End}
  21          h = h / 2;
          Instructions = 'id' AtrDirFunCall Instructions
              [0021, 0009] (0001,                   ID) {h}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0021, 0011] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0021, 0013] (0001,                   ID) {h}
          IdFunCall = Id
          Id = Epsilon
          TaLL = 'OP_DIV' Fa TaLL
              [0021, 0015] (0036,               OP_DIV) {/}
          Fa = 'CT_INT'
              [0021, 0017] (0027,               CT_INT) {2}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0021, 0018] (0049,             TERMINAL) {;}
  22      End
          Instructions = Epsilon
              [0022, 0005] (0003,               PR_END) {End}
  23      Return;
          Instructions = Return Instructions
          Return = 'Return' ReturnParam
              [0023, 0005] (0008,            PR_RETURN) {Return}
          ReturnParam = ';'
              [0023, 0011] (0049,             TERMINAL) {;}
  24  End
              [0024, 0001] (0003,               PR_END) {End}
  25
  26  Funct Int Main ( ) Begin
          S = 'Funct' DcFun S
              [0026, 0001] (0004,          PR_FUNCTION) {Funct}
          DcFun = 'Int' DcIntFunMain
              [0026, 0007] (0016,               PR_INT) {Int}
          DcIntFunMain = 'Main' '(' ')' BlockDc
              [0026, 0011] (0005,              PR_MAIN) {Main}
              [0026, 0016] (0045,               AB_PAR) {(}
              [0026, 0018] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0026, 0020] (0002,             PR_BEGIN) {Begin}
  27      Int n, v, i;
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0027, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0027, 0009] (0001,                   ID) {n}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0027, 0010] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0027, 0012] (0001,                   ID) {v}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = ',' DcIdAtr
              [0027, 0013] (0050,                  SEP) {,}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0027, 0015] (0001,                   ID) {i}
          Id = Epsilon
          Atr = Epsilon
          DcIdAtrFat = Epsilon
              [0027, 0016] (0049,             TERMINAL) {;}
  28      Output("Digite o tamanho do array: ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0028, 0005] (0022,            PR_OUTPUT) {Output}
              [0028, 0011] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0028, 0012] (0029,               CT_STR) {"Digite o tamanho do array: "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0028, 0041] (0046,              FEC_PAR) {)}
              [0028, 0042] (0049,             TERMINAL) {;}
  29      Input(n);
          Instructions = CommandIO Instructions
          CommandIO = Input
          Input = 'Input' '(' InputParam ')' ';'
              [0029, 0005] (0021,             PR_INPUT) {Input}
              [0029, 0010] (0045,               AB_PAR) {(}
          InputParam = 'id' Id InputParamFat
              [0029, 0011] (0001,                   ID) {n}
          Id = Epsilon
          InputParamFat = Epsilon
              [0029, 0012] (0046,              FEC_PAR) {)}
              [0029, 0013] (0049,             TERMINAL) {;}
  30      Int array[n];
          Instructions = DcId Instructions
          DcId = VarType DcIdAtr ';'
          VarType = 'Int'
              [0030, 0005] (0016,               PR_INT) {Int}
          DcIdAtr = 'id' Id Atr DcIdAtrFat
              [0030, 0009] (0001,                   ID) {array}
          Id = '[' Ea ']'
              [0030, 0014] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0030, 0015] (0001,                   ID) {n}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0030, 0016] (0048,              FEC_COL) {]}
          Atr = Epsilon
          DcIdAtrFat = Epsilon
              [0030, 0017] (0049,             TERMINAL) {;}
  31
  32      Output("Digite os valores para serem ordenados: ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0032, 0005] (0022,            PR_OUTPUT) {Output}
              [0032, 0011] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0032, 0012] (0029,               CT_STR) {"Digite os valores para serem ordenados: "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0032, 0054] (0046,              FEC_PAR) {)}
              [0032, 0055] (0049,             TERMINAL) {;}
  33      For (i = 0, n) Begin
          Instructions = Command Instructions
          Command = For
          For = 'For' '(' DcInt ',' IntValue ForFat
              [0033, 0005] (0015,               PR_FOR) {For}
              [0033, 0009] (0045,               AB_PAR) {(}
          DcInt = 'id' AtrInt
              [0033, 0010] (0001,                   ID) {i}
          AtrInt = '=' IntValue
              [0033, 0012] (0030,               OP_ATR) {=}
          IntValue = 'CT_INT'
              [0033, 0014] (0027,               CT_INT) {0}
              [0033, 0015] (0050,                  SEP) {,}
          IntValue = 'id'
              [0033, 0017] (0001,                   ID) {n}
          ForFat = ')' BlockDc
              [0033, 0018] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0033, 0020] (0002,             PR_BEGIN) {Begin}
  34          Input(array[i]);
          Instructions = CommandIO Instructions
          CommandIO = Input
          Input = 'Input' '(' InputParam ')' ';'
              [0034, 0009] (0021,             PR_INPUT) {Input}
              [0034, 0014] (0045,               AB_PAR) {(}
          InputParam = 'id' Id InputParamFat
              [0034, 0015] (0001,                   ID) {array}
          Id = '[' Ea ']'
              [0034, 0020] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0034, 0021] (0001,                   ID) {i}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0034, 0022] (0048,              FEC_COL) {]}
          InputParamFat = Epsilon
              [0034, 0023] (0046,              FEC_PAR) {)}
              [0034, 0024] (0049,             TERMINAL) {;}
  35      End
          Instructions = Epsilon
              [0035, 0005] (0003,               PR_END) {End}
  36
  37      Output("Valores adicionados: ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0037, 0005] (0022,            PR_OUTPUT) {Output}
              [0037, 0011] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0037, 0012] (0029,               CT_STR) {"Valores adicionados: "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0037, 0035] (0046,              FEC_PAR) {)}
              [0037, 0036] (0049,             TERMINAL) {;}
  38      For (i = 0, n) Begin
          Instructions = Command Instructions
          Command = For
          For = 'For' '(' DcInt ',' IntValue ForFat
              [0038, 0005] (0015,               PR_FOR) {For}
              [0038, 0009] (0045,               AB_PAR) {(}
          DcInt = 'id' AtrInt
              [0038, 0010] (0001,                   ID) {i}
          AtrInt = '=' IntValue
              [0038, 0012] (0030,               OP_ATR) {=}
          IntValue = 'CT_INT'
              [0038, 0014] (0027,               CT_INT) {0}
              [0038, 0015] (0050,                  SEP) {,}
          IntValue = 'id'
              [0038, 0017] (0001,                   ID) {n}
          ForFat = ')' BlockDc
              [0038, 0018] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0038, 0020] (0002,             PR_BEGIN) {Begin}
  39          v = array[i];
          Instructions = 'id' AtrDirFunCall Instructions
              [0039, 0009] (0001,                   ID) {v}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0039, 0011] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0039, 0013] (0001,                   ID) {array}
          IdFunCall = Id
          Id = '[' Ea ']'
              [0039, 0018] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0039, 0019] (0001,                   ID) {i}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0039, 0020] (0048,              FEC_COL) {]}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0039, 0021] (0049,             TERMINAL) {;}
  40          Output(v, " ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0040, 0009] (0022,            PR_OUTPUT) {Output}
              [0040, 0015] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0040, 0016] (0001,                   ID) {v}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = ',' OutputParam
              [0040, 0017] (0050,                  SEP) {,}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0040, 0019] (0029,               CT_STR) {" "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0040, 0022] (0046,              FEC_PAR) {)}
              [0040, 0023] (0049,             TERMINAL) {;}
  41      End
          Instructions = Epsilon
              [0041, 0005] (0003,               PR_END) {End}
  42
  43      shellsort(array);
          Instructions = 'id' AtrDirFunCall Instructions
              [0043, 0005] (0001,                   ID) {shellsort}
          AtrDirFunCall = FunCall
          FunCall = '(' FunCallParam
              [0043, 0014] (0045,               AB_PAR) {(}
          FunCallParam = ParamFun ')' ';'
          ParamFun = Ec ParamFunLL
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0043, 0015] (0001,                   ID) {array}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          ParamFunLL = Epsilon
              [0043, 0020] (0046,              FEC_PAR) {)}
              [0043, 0021] (0049,             TERMINAL) {;}
  44
  45      Output("Valores ordenados: ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0045, 0005] (0022,            PR_OUTPUT) {Output}
              [0045, 0011] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0045, 0012] (0029,               CT_STR) {"Valores ordenados: "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0045, 0033] (0046,              FEC_PAR) {)}
              [0045, 0034] (0049,             TERMINAL) {;}
  46      For (i = 0, n) Begin
          Instructions = Command Instructions
          Command = For
          For = 'For' '(' DcInt ',' IntValue ForFat
              [0046, 0005] (0015,               PR_FOR) {For}
              [0046, 0009] (0045,               AB_PAR) {(}
          DcInt = 'id' AtrInt
              [0046, 0010] (0001,                   ID) {i}
          AtrInt = '=' IntValue
              [0046, 0012] (0030,               OP_ATR) {=}
          IntValue = 'CT_INT'
              [0046, 0014] (0027,               CT_INT) {0}
              [0046, 0015] (0050,                  SEP) {,}
          IntValue = 'id'
              [0046, 0017] (0001,                   ID) {n}
          ForFat = ')' BlockDc
              [0046, 0018] (0046,              FEC_PAR) {)}
          BlockDc = 'Begin' Instructions 'End'
              [0046, 0020] (0002,             PR_BEGIN) {Begin}
  47          v = array[i];
          Instructions = 'id' AtrDirFunCall Instructions
              [0047, 0009] (0001,                   ID) {v}
          AtrDirFunCall = AtrDir
          AtrDir = '=' Ec ';'
              [0047, 0011] (0030,               OP_ATR) {=}
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0047, 0013] (0001,                   ID) {array}
          IdFunCall = Id
          Id = '[' Ea ']'
              [0047, 0018] (0047,               AB_COL) {[}
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0047, 0019] (0001,                   ID) {i}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
              [0047, 0020] (0048,              FEC_COL) {]}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
              [0047, 0021] (0049,             TERMINAL) {;}
  48          Output(v, " ");
          Instructions = CommandIO Instructions
          CommandIO = Output
          Output = 'Output' '(' OutputParam ')' ';'
              [0048, 0009] (0022,            PR_OUTPUT) {Output}
              [0048, 0015] (0045,               AB_PAR) {(}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'id' IdFunCall
              [0048, 0016] (0001,                   ID) {v}
          IdFunCall = Id
          Id = Epsilon
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = ',' OutputParam
              [0048, 0017] (0050,                  SEP) {,}
          OutputParam = Ec OutputParamFat
          Ec = Eb EcLL
          Eb = Tb EbLL
          Tb = Ra TbLL
          Ra = Rb RaLL
          Rb = Ea RbLL
          Ea = Ta EaLL
          Ta = Fa TaLL
          Fa = 'CT_STR'
              [0048, 0019] (0029,               CT_STR) {" "}
          TaLL = Epsilon
          EaLL = Epsilon
          RbLL = Epsilon
          RaLL = Epsilon
          TbLL = Epsilon
          EbLL = Epsilon
          EcLL = Epsilon
          OutputParamFat = Epsilon
              [0048, 0022] (0046,              FEC_PAR) {)}
              [0048, 0023] (0049,             TERMINAL) {;}
  49      End
          Instructions = Epsilon
              [0049, 0005] (0003,               PR_END) {End}
  50
  51      Return;
          Instructions = Return Instructions
          Return = 'Return' ReturnParam
              [0051, 0005] (0008,            PR_RETURN) {Return}
          ReturnParam = ';'
              [0051, 0011] (0049,             TERMINAL) {;}
  52  End
              [0052, 0001] (0003,               PR_END) {End}
          S = Epsilon
              [0052, 0004] (0000,                  EOF) {EOF}